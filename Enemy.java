import java.util.Random;
import java.util.Scanner;
/**
 * Represents the randomly generated enemies on the board associated with the ampersand character, uses the {@link EnemyGenerator} to spread the enemies throughout the board,
 * getting their information from {@link EnemyGenerator} to be used when a player wishes to battle an enemy. 
 * @author Lucas Pokrywka, Ethan Pearson
 */
public class Enemy extends Being{
	private String name;
	private int damage;
	private int health;
	//private Random rng;
	private int badGuyID;
	private static int availableID = 0;
	/**
	 * Constructs the values set in place for the enemies which include their name, damage, health as well as the amount of enemies that are left on the board. 
	 * Randomly sets the damage the enemy is given based on their damage amount set in this arraylist from {@link EnemyGenerator}.
	 * @param name retrieves the name of the enemy generated by the {@link EnemyGenerator}.
	 * @param damage retrieves the damage of the enemy from the {@link EnemyGenerator} and sets the damage within a range based on the damage value set.
	 * @param health retrieves the health amount of the enemy from the {@link enemy Generator}
	 */
	Enemy(String name, int damage, int health) {
		this.name = name;
		if(damage == 10)
			this.damage = randRange(1, 25);
		else if(damage == 25)
			this.damage = randRange(21, 35);
		else if(damage == 50)
			this.damage = randRange(31, 50);
		else
			this.damage = damage;
		this.health = health;
		badGuyID = availableID;
		availableID++;


	}
	/**
	 * Constructs the essential variables when attempting to restore from a save file.
	 * @param s scanner object used to restore the enemies values from a save file such as their name, health, damage, and the amount of enemies left on the board.
	 */
	Enemy(Scanner s){
		this.name = s.nextLine();
		this.health = s.nextInt();
		this.damage = s.nextInt();
		this.badGuyID = s.nextInt();	
	}
	/**
	 * Retrieves the name of the enemy which was generated from the constructor.
	 * @return the name constructed above for the enemy that was randomly generated.
	 */
	public String getName() {
		return name;
	}
	/**
	 * Retrieves the amount of health the enemy was given from the constructor.
	 * @return the amount of health the enemy was given when they were generated.
	 */
	public int getHealth() {
		return health;
	}
	/**
	 * Retrieves the amount of randomly generated damage for the enemy to have from the constructor.
	 * @return the amount of damage that was randomly generated for the enemy from the constructor.
	 */
	public int getDamage() {
		return damage;
	}
	/**
	 * Retrieves the amount of enemies left on the board from the constructor every time the player kills an enemy.
	 * @return the amount of enemies that are left on the board each time the player kills an enemy.
	 */
	public int getBadGuyID() {
		return badGuyID;
	}
	/**
	 * Used to generate a string for the enemy including their name, health, and damage. 
	 * @return the enemies name, health and damage as a string.
	 */
	public String toString() {
		return name + " " + health + " " + damage;
	}	
	/**
	 * Check documentation for {@link Item#randRange()} as it is used in a similar way except for with enemies. 
	 */
	private static int randRange(int min, int max) {
		if(min >= max) {
			throw new IllegalArgumentException("max must be greater than min");
		}

		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}
}
